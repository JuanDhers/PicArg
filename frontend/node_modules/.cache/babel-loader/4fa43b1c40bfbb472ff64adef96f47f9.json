{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juand\\\\Desktop\\\\fotoarg\\\\frontend\\\\src\\\\components\\\\ListadoFotos.js\";\nimport React, { useState, useEffect } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport TarjetaImagen from './TarjetaImagen';\nimport NavBarMispublicaciones from './NavBarMispublicaciones';\nimport FotosEditorModals from './FotosEditorModals';\nimport SweetAlert from 'sweetalert2';\n\nfunction ListadoFotos(props) {\n  //tiene una variable de estado y una funcion\n  // recibe un valor inicial un array vacio\n  const [fotos, setFotos] = useState([]); //Funcion que va a mostrar o ocultar el modal de FotosEditor Modal\n\n  const [ShowFotosEditorModal, setShowFotosEditorModals] = useState(false); //función que diferencia de donde viene el llamado al modal, si editar o nueva publicacion.\n\n  const [selectedFoto, setSelectedFoto] = useState(null);\n\n  const handleHideFotosEditorModal = () => {\n    setSelectedFoto(null); //limpia los campos del modal\n\n    setShowFotosEditorModals(false);\n  };\n\n  const onShowFotosEditorModals = () => {\n    setSelectedFoto(null); //limpia los campos cuando del modal\n\n    setShowFotosEditorModals(true);\n  }; //Llama a la función que cierra el modal y recarga el listado de mis publicaciones\n  //recibe como parametro message que lo muestra despues en el alert\n\n\n  const handleFotoSaved = message => {\n    //cierra el modal\n    setShowFotosEditorModals(false); //recarga el listado\n\n    cargarListadoFotos(); //mensaje de carga ok.\n\n    SweetAlert.fire({\n      text: message,\n      icon: 'success'\n    });\n  }; //FUNCION CARGAR LISTADOS\n  //CARGA LOS LISTADOS DE TODAS LAS FOTOS O SUS CONDICIONALES\n\n\n  const cargarListadoFotos = () => {\n    let endpoint = 'fotos'; //pregunta si hay un usuario y si type es igual a mis publicaciones.\n    //si hay ususario y quiere entrar a sus publicaciones \n    //recibe el id de usuario\n    //si no devuelve el listado completo.\n    //recibe los props de app.js\n\n    if (props.user && props.type === 'mispublicaciones') {\n      endpoint = 'fotos/user/' + props.user.id;\n    }\n\n    fetch(`http://localhost:8888/${endpoint}`).then(response => response.json() //llega la respuesta y retorna el json. a su vez devuelve una promesa.\n    ).then(data => {\n      setFotos(data); //lo que le pase lo pone dentro de la variable de estado fotos\n    });\n  };\n\n  useEffect(cargarListadoFotos, []); // esta funcion se llama desde el boton editar de TarjetaImagen que llama a handleEditClick\n  //recibe el id de la foto de onClickEdit en idPhoto\n\n  const handleEditClick = idPhoto => {\n    setSelectedFoto(idPhoto); // cuardo el id de la foto seleccionada \n\n    setShowFotosEditorModals(true); // muestra el modal\n  };\n\n  const handleDeleteClick = idPhoto => {\n    SweetAlert.fire({\n      title: 'Confirma que desea borrar la publicación?',\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonText: 'Aceptar',\n      cancelButtonText: 'Cancelar'\n    }).then(result => {\n      if (result.value) {\n        fetch(`http://localhost:8888/fotos/${idPhoto}`, {\n          method: 'DELETE',\n          credential: 'include'\n        }).then(response => response.json()).then(data => {\n          if (data.status === 'ok') {\n            SweetAlert.fire({\n              text: data.message,\n              icon: \"success\"\n            });\n            cargarListadoFotos(); //llama a la funcion para que se recargue  \n          } else {\n            SweetAlert.fire({\n              text: data.message,\n              icon: 'error'\n            });\n          }\n        });\n      }\n    });\n  }; //RETORNO DE LISTADOS FOTOS\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, props.type === \"mispublicaciones\" && /*#__PURE__*/React.createElement(NavBarMispublicaciones, {\n    handleHideFotosEditorModal: onShowFotosEditorModals,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    className: \"ml-2 mr-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 10\n    }\n  }, //recorre todo el array de productos ejecutando la funcion\n  // encada vuelta le paso una objeto a la funcion\n  //retorna un componente tarjeta foto en cada vuelta. \n  //devuelve un array que mapea los elementos de fotos\n  fotos.map(foto => {\n    return /*#__PURE__*/React.createElement(TarjetaImagen, {\n      titulo: foto.titulo,\n      autor: foto.usuario,\n      foto: foto.foto,\n      id: foto.id,\n      type: props.type,\n      onEditClick: handleEditClick //el llamado viene de tarjeta imagen \n      ,\n      onDeleteClick: handleDeleteClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 29\n      }\n    });\n  })), /*#__PURE__*/React.createElement(FotosEditorModals, {\n    show: ShowFotosEditorModal,\n    handleHide: handleHideFotosEditorModal,\n    onFotoSaved: handleFotoSaved // props. que se pasa a editorModal para que se cierre el modal cuando se carga \n    ,\n    idPhoto: selectedFoto //tiene una variable de estado que viene de tarjetaImagen, que diferencia entre nuevo y editar \n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 10\n    }\n  }));\n}\n\nexport default ListadoFotos;","map":{"version":3,"sources":["C:/Users/juand/Desktop/fotoarg/frontend/src/components/ListadoFotos.js"],"names":["React","useState","useEffect","Row","TarjetaImagen","NavBarMispublicaciones","FotosEditorModals","SweetAlert","ListadoFotos","props","fotos","setFotos","ShowFotosEditorModal","setShowFotosEditorModals","selectedFoto","setSelectedFoto","handleHideFotosEditorModal","onShowFotosEditorModals","handleFotoSaved","message","cargarListadoFotos","fire","text","icon","endpoint","user","type","id","fetch","then","response","json","data","handleEditClick","idPhoto","handleDeleteClick","title","showCancelButton","confirmButtonText","cancelButtonText","result","value","method","credential","status","map","foto","titulo","usuario"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport TarjetaImagen from './TarjetaImagen';\r\nimport NavBarMispublicaciones from './NavBarMispublicaciones'\r\nimport FotosEditorModals from './FotosEditorModals';\r\nimport SweetAlert from 'sweetalert2';\r\n\r\n\r\n\r\nfunction ListadoFotos(props){\r\n\r\n//tiene una variable de estado y una funcion\r\n// recibe un valor inicial un array vacio\r\nconst [fotos, setFotos] = useState([])  \r\n\r\n\r\n//Funcion que va a mostrar o ocultar el modal de FotosEditor Modal\r\nconst [ShowFotosEditorModal, setShowFotosEditorModals]  = useState(false);\r\n\r\n//función que diferencia de donde viene el llamado al modal, si editar o nueva publicacion.\r\nconst [selectedFoto, setSelectedFoto]= useState(null);\r\n\r\n    const handleHideFotosEditorModal = ()=>{\r\n        setSelectedFoto(null);//limpia los campos del modal\r\n        setShowFotosEditorModals(false);\r\n    }\r\n\r\n    const onShowFotosEditorModals = ()=>{\r\n        setSelectedFoto(null);//limpia los campos cuando del modal\r\n        setShowFotosEditorModals(true);\r\n    }\r\n\r\n//Llama a la función que cierra el modal y recarga el listado de mis publicaciones\r\n//recibe como parametro message que lo muestra despues en el alert\r\n    const handleFotoSaved = (message)=>{\r\n        //cierra el modal\r\n        setShowFotosEditorModals(false);\r\n        //recarga el listado\r\n        cargarListadoFotos();\r\n        //mensaje de carga ok.\r\n        SweetAlert.fire(\r\n            {\r\n                text: message,\r\n                icon: 'success'\r\n            }\r\n        );\r\n\r\n    }\r\n\r\n\r\n//FUNCION CARGAR LISTADOS\r\n//CARGA LOS LISTADOS DE TODAS LAS FOTOS O SUS CONDICIONALES\r\nconst cargarListadoFotos = () =>{\r\n\r\n    let endpoint = 'fotos';\r\n//pregunta si hay un usuario y si type es igual a mis publicaciones.\r\n//si hay ususario y quiere entrar a sus publicaciones \r\n//recibe el id de usuario\r\n//si no devuelve el listado completo.\r\n//recibe los props de app.js\r\n\r\nif(props.user && props.type === 'mispublicaciones'){\r\n    endpoint = 'fotos/user/' + props.user.id\r\n}\r\n\r\n\r\n\r\n    fetch(`http://localhost:8888/${endpoint}`).then(\r\n        response =>response.json() //llega la respuesta y retorna el json. a su vez devuelve una promesa.\r\n        ).then(\r\n            data=>{\r\n                setFotos(data)//lo que le pase lo pone dentro de la variable de estado fotos\r\n            }\r\n        )\r\n    }\r\n\r\n\r\nuseEffect(cargarListadoFotos , []);\r\n\r\n\r\n// esta funcion se llama desde el boton editar de TarjetaImagen que llama a handleEditClick\r\n//recibe el id de la foto de onClickEdit en idPhoto\r\nconst handleEditClick = (idPhoto)=>{\r\n\r\n    setSelectedFoto(idPhoto);// cuardo el id de la foto seleccionada \r\n    setShowFotosEditorModals(true); // muestra el modal\r\n\r\n    \r\n}\r\n\r\nconst handleDeleteClick = (idPhoto)=>{\r\n\r\n    SweetAlert.fire({\r\n        title: 'Confirma que desea borrar la publicación?',\r\n        icon: 'question',\r\n        showCancelButton: true,\r\n        confirmButtonText: 'Aceptar',\r\n        cancelButtonText: 'Cancelar'\r\n    }).then(result =>{\r\n        if(result.value){ \r\n            \r\n            fetch(`http://localhost:8888/fotos/${idPhoto}`,\r\n                {\r\n                method: 'DELETE',\r\n                credential: 'include'\r\n                }\r\n            ).then(\r\n                response => response.json()\r\n            ).then(\r\n                data =>{\r\n                    if( data.status === 'ok'){\r\n                        SweetAlert.fire({\r\n                            text: data.message,\r\n                            icon: \"success\"\r\n                        })\r\n                        cargarListadoFotos(); //llama a la funcion para que se recargue  \r\n                    }else{\r\n                        SweetAlert.fire({\r\n                            text: data.message,\r\n                            icon: 'error'\r\n                        })\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    })\r\n       \r\n}\r\n\r\n\r\n//RETORNO DE LISTADOS FOTOS\r\n\r\n    return(\r\n        <>\r\n        {props.type === \"mispublicaciones\" &&\r\n        <NavBarMispublicaciones handleHideFotosEditorModal={onShowFotosEditorModals}/>\r\n        }\r\n\r\n   \r\n         <Row className=\"ml-2 mr-2\">\r\n\r\n             {\r\n                 //recorre todo el array de productos ejecutando la funcion\r\n                 // encada vuelta le paso una objeto a la funcion\r\n                 //retorna un componente tarjeta foto en cada vuelta. \r\n                 //devuelve un array que mapea los elementos de fotos\r\n                 fotos.map( foto=>{\r\n                        return(\r\n                            <TarjetaImagen  titulo={foto.titulo}\r\n                                            autor={foto.usuario}\r\n                                            foto={foto.foto}\r\n                                            id={foto.id}\r\n                                            type={props.type}\r\n                                            onEditClick={handleEditClick}//el llamado viene de tarjeta imagen \r\n                                            onDeleteClick={handleDeleteClick}            \r\n                            />\r\n                        )\r\n                    }\r\n                 )\r\n             }\r\n\r\n\r\n         </Row>\r\n\r\n\r\n         <FotosEditorModals show={ShowFotosEditorModal} \r\n                            handleHide={handleHideFotosEditorModal}\r\n                            onFotoSaved={handleFotoSaved}// props. que se pasa a editorModal para que se cierre el modal cuando se carga \r\n                            idPhoto={selectedFoto}//tiene una variable de estado que viene de tarjetaImagen, que diferencia entre nuevo y editar \r\n                            />\r\n\r\n         </>\r\n    );\r\n}\r\n\r\nexport default ListadoFotos;"]},"metadata":{},"sourceType":"module"}