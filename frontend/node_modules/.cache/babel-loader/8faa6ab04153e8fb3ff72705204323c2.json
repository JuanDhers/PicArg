{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juand\\\\Desktop\\\\fotoarg\\\\frontend\\\\src\\\\components\\\\ListadoFotos.js\";\nimport React, { useState, useEffect } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport TarjetaImagen from './TarjetaImagen';\nimport NavBarMispublicaciones from './NavBarMispublicaciones';\nimport FotosEditorModals from './FotosEditorModals';\nimport SweetAlert from 'sweetalert2';\n\nfunction ListadoFotos(props) {\n  //tiene una variable de estado y una funcion\n  // recibe un valor inicial un array vacio\n  const [fotos, setFotos] = useState([]); //Funcion que va a mostrar o ocultar el modal de FotosEditor Modal\n\n  const [ShowFotosEditorModal, setShowFotosEditorModals] = useState(false); //función que diferencia de donde viene el llamado al modal, si editar o nueva publicacion.\n\n  const [selectedFoto, setSelectedFoto] = useState(null);\n  const [favoritos, setFavoritos] = useState([]);\n\n  const handleHideFotosEditorModal = () => {\n    setSelectedFoto(null); //limpia los campos del modal\n\n    setShowFotosEditorModals(false);\n  };\n\n  const onShowFotosEditorModals = () => {\n    setSelectedFoto(null); //limpia los campos cuando del modal\n\n    setShowFotosEditorModals(true);\n  }; //Llama a la función que cierra el modal y recarga el listado de mis publicaciones\n  //recibe como parametro message que lo muestra despues en el alert\n\n\n  const handleFotoSaved = message => {\n    //cierra el modal\n    setShowFotosEditorModals(false); //recarga el listado\n\n    cargarListadoFotos(); //mensaje de carga ok.\n\n    SweetAlert.fire({\n      text: message,\n      icon: 'success'\n    });\n  }; //CAMBIA EL ESTADO DE FAVORITOS, Recibe el click de la tarjetaImagen\n\n\n  const handleCangeFavStatus = (isFav, pubId, userId) => {\n    let url = 'http://localhost:8888/favoritos';\n    const formData = new FormData();\n    formData.append('userId', userId);\n    formData.append('pubId', pubId);\n    let method = isFav ? 'DELETE' : 'POST'; //designo el metodo dependiendo el estado anteiror\n\n    fetch(url, {\n      method,\n      body: formData,\n      credentials: \"include\"\n    }).then(response => response.json()).then(data => {\n      cargarListadoFotos();\n      SweetAlert.fire({\n        title: data.message,\n        icon: data.icon\n      });\n    });\n  }; //FUNCION CARGAR LISTADOS\n  //CARGA LOS LISTADOS DE TODAS LAS FOTOS O SUS CONDICIONALES\n\n\n  const cargarListadoFotos = () => {\n    let endpoint = 'fotos'; //pregunta si hay un usuario y si type es igual a mis publicaciones.\n    //si hay ususario y quiere entrar a sus publicaciones \n    //recibe el id de usuario\n    //si no devuelve el listado completo.\n    //recibe los props de app.js\n\n    if (props.type === 'productos' && props.searchPubs) {\n      endpoint += '/search/' + props.searchPubs;\n    } else {\n      if (props.user) {\n        switch (props.type) {\n          case 'mispublicaciones':\n            endpoint += '/user/' + props.user.id;\n            break;\n\n          case 'favoritos':\n            endpoint = 'favoritos/' + props.user.id;\n            break;\n        }\n      }\n    }\n\n    if (props.user) {\n      //obtengo los favoritos\n      fetch(`http://localshost:8888/favoritos/${props.user.id}`).then(response => response.json()).then(data => {});\n    }\n\n    fetch(`http://localhost:8888/${endpoint}`).then(response => response.json() //llega la respuesta y retorna el json. a su vez devuelve una promesa.\n    ).then(data => {\n      setFotos(data); //lo que le pase lo pone dentro de la variable de estado fotos\n    });\n  };\n\n  useEffect(cargarListadoFotos, [props.user]); // esta funcion se llama desde el boton editar de TarjetaImagen que llama a handleEditClick\n  //recibe el id de la foto de onClickEdit en idPhoto\n\n  const handleEditClick = idPhoto => {\n    setSelectedFoto(idPhoto); // cuardo el id de la foto seleccionada \n\n    setShowFotosEditorModals(true); // muestra el modal\n  };\n\n  const handleDeleteClick = idPhoto => {\n    SweetAlert.fire({\n      title: 'Confirma que desea borrar la publicación?',\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonText: 'Aceptar',\n      cancelButtonText: 'Cancelar'\n    }).then(result => {\n      if (result.value) {\n        fetch(`http://localhost:8888/fotos/${idPhoto}`, {\n          method: 'DELETE',\n          credentials: 'include'\n        }).then(response => response.json()).then(data => {\n          if (data.status === 'ok') {\n            SweetAlert.fire({\n              text: data.message,\n              icon: \"success\"\n            });\n            cargarListadoFotos(); //llama a la funcion para que se recargue el listado  \n          } else {\n            SweetAlert.fire({\n              text: data.message,\n              icon: 'error'\n            });\n          }\n        });\n      }\n    });\n  }; //RETORNO DE LISTADOS FOTOS\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, props.type === \"mispublicaciones\" && /*#__PURE__*/React.createElement(NavBarMispublicaciones, {\n    handleHideFotosEditorModal: onShowFotosEditorModals,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    className: \"ml-2 mr-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 10\n    }\n  }, //recorre todo el array de productos ejecutando la funcion\n  // encada vuelta le paso una objeto a la funcion\n  //retorna un componente tarjeta foto en cada vuelta. \n  //devuelve un array que mapea los elementos de fotos\n  fotos.map(foto => {\n    return /*#__PURE__*/React.createElement(TarjetaImagen, {\n      titulo: foto.titulo,\n      autor: foto.usuario,\n      foto: foto.foto,\n      id: foto.id,\n      type: props.type,\n      onEditClick: handleEditClick //el llamado viene de tarjeta imagen \n      ,\n      onDeleteClick: handleDeleteClick,\n      user: props.user,\n      isFav: true,\n      onChangeFavStatus: handleCangeFavStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 29\n      }\n    });\n  })), /*#__PURE__*/React.createElement(FotosEditorModals, {\n    show: ShowFotosEditorModal,\n    handleHide: handleHideFotosEditorModal,\n    onFotoSaved: handleFotoSaved // props. que se pasa a editorModal para que se cierre el modal cuando se carga \n    ,\n    idPhoto: selectedFoto //tiene una variable de estado que viene de tarjetaImagen, que diferencia entre nuevo y editar \n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 10\n    }\n  }));\n}\n\nexport default ListadoFotos;","map":{"version":3,"sources":["C:/Users/juand/Desktop/fotoarg/frontend/src/components/ListadoFotos.js"],"names":["React","useState","useEffect","Row","TarjetaImagen","NavBarMispublicaciones","FotosEditorModals","SweetAlert","ListadoFotos","props","fotos","setFotos","ShowFotosEditorModal","setShowFotosEditorModals","selectedFoto","setSelectedFoto","favoritos","setFavoritos","handleHideFotosEditorModal","onShowFotosEditorModals","handleFotoSaved","message","cargarListadoFotos","fire","text","icon","handleCangeFavStatus","isFav","pubId","userId","url","formData","FormData","append","method","fetch","body","credentials","then","response","json","data","title","endpoint","type","searchPubs","user","id","handleEditClick","idPhoto","handleDeleteClick","showCancelButton","confirmButtonText","cancelButtonText","result","value","status","map","foto","titulo","usuario"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport TarjetaImagen from './TarjetaImagen';\r\nimport NavBarMispublicaciones from './NavBarMispublicaciones'\r\nimport FotosEditorModals from './FotosEditorModals';\r\nimport SweetAlert from 'sweetalert2';\r\n\r\n\r\n\r\nfunction ListadoFotos(props){\r\n\r\n//tiene una variable de estado y una funcion\r\n// recibe un valor inicial un array vacio\r\nconst [fotos, setFotos] = useState([])  \r\n\r\n\r\n//Funcion que va a mostrar o ocultar el modal de FotosEditor Modal\r\nconst [ShowFotosEditorModal, setShowFotosEditorModals]  = useState(false);\r\n\r\n//función que diferencia de donde viene el llamado al modal, si editar o nueva publicacion.\r\nconst [selectedFoto, setSelectedFoto]= useState(null);\r\n\r\nconst [favoritos, setFavoritos] = useState ([]);\r\n\r\n    const handleHideFotosEditorModal = ()=>{\r\n        setSelectedFoto(null);//limpia los campos del modal\r\n        setShowFotosEditorModals(false);\r\n    }\r\n\r\n    const onShowFotosEditorModals = ()=>{\r\n        setSelectedFoto(null);//limpia los campos cuando del modal\r\n        setShowFotosEditorModals(true);\r\n    }\r\n\r\n//Llama a la función que cierra el modal y recarga el listado de mis publicaciones\r\n//recibe como parametro message que lo muestra despues en el alert\r\n    const handleFotoSaved = (message)=>{\r\n        //cierra el modal\r\n        setShowFotosEditorModals(false);\r\n        //recarga el listado\r\n        cargarListadoFotos();\r\n        //mensaje de carga ok.\r\n        SweetAlert.fire(\r\n            {\r\n                text: message,\r\n                icon: 'success'\r\n            }\r\n        );\r\n\r\n    }\r\n\r\n//CAMBIA EL ESTADO DE FAVORITOS, Recibe el click de la tarjetaImagen\r\nconst handleCangeFavStatus = (isFav, pubId, userId)=>{\r\n    let url = 'http://localhost:8888/favoritos';\r\n\r\n    const formData = new FormData();\r\n\r\n    formData.append('userId', userId);\r\n    formData.append('pubId', pubId);\r\n\r\n    let method = isFav ? 'DELETE' : 'POST'; //designo el metodo dependiendo el estado anteiror\r\n\r\n    fetch(url, {\r\n        method,\r\n        body : formData,\r\n        credentials : \"include\"\r\n    }).then( response=> response.json() ) \r\n        .then(data =>{\r\n            cargarListadoFotos();\r\n\r\n            SweetAlert.fire({\r\n                title: data.message,\r\n                icon: data.icon\r\n            })\r\n        })\r\n}\r\n\r\n//FUNCION CARGAR LISTADOS\r\n//CARGA LOS LISTADOS DE TODAS LAS FOTOS O SUS CONDICIONALES\r\nconst cargarListadoFotos = () =>{\r\n\r\n    let endpoint = 'fotos';\r\n//pregunta si hay un usuario y si type es igual a mis publicaciones.\r\n//si hay ususario y quiere entrar a sus publicaciones \r\n//recibe el id de usuario\r\n//si no devuelve el listado completo.\r\n//recibe los props de app.js\r\n\r\n\r\n    if(props.type === 'productos' && props.searchPubs){\r\n        endpoint += '/search/' + props.searchPubs; \r\n    }\r\n     else{\r\n         if(props.user){\r\n             switch (props.type){\r\n                 case 'mispublicaciones' :\r\n                     endpoint += '/user/' + props.user.id;\r\n                     break;\r\n                \r\n                 case 'favoritos' :\r\n                     endpoint = 'favoritos/' + props.user.id;\r\n                     break; \r\n             }\r\n         }\r\n     }\r\n\r\n     if( props.user){\r\n         //obtengo los favoritos\r\n\r\n         fetch(`http://localshost:8888/favoritos/${props.user.id}`).then(\r\n             response =>  response.json()\r\n         ).then(\r\n             data =>{\r\n\r\n             }\r\n         )\r\n     }\r\n\r\n\r\n\r\n    fetch(`http://localhost:8888/${endpoint}`).then(\r\n        response =>response.json() //llega la respuesta y retorna el json. a su vez devuelve una promesa.\r\n        ).then(\r\n            data=>{\r\n                setFotos(data)//lo que le pase lo pone dentro de la variable de estado fotos\r\n            }\r\n        )\r\n    }\r\n\r\n\r\nuseEffect(cargarListadoFotos , [props.user]);\r\n\r\n\r\n// esta funcion se llama desde el boton editar de TarjetaImagen que llama a handleEditClick\r\n//recibe el id de la foto de onClickEdit en idPhoto\r\nconst handleEditClick = (idPhoto)=>{\r\n\r\n    setSelectedFoto(idPhoto);// cuardo el id de la foto seleccionada \r\n    setShowFotosEditorModals(true); // muestra el modal\r\n\r\n    \r\n}\r\n\r\nconst handleDeleteClick = (idPhoto)=>{\r\n\r\n    SweetAlert.fire({\r\n        title: 'Confirma que desea borrar la publicación?',\r\n        icon: 'question',\r\n        showCancelButton: true,\r\n        confirmButtonText: 'Aceptar',\r\n        cancelButtonText: 'Cancelar'\r\n    }).then(result =>{\r\n        if(result.value){ \r\n            \r\n            fetch(`http://localhost:8888/fotos/${idPhoto}`,\r\n                {\r\n                method: 'DELETE',\r\n                credentials: 'include'\r\n                }\r\n            ).then(\r\n                response => response.json()\r\n            ).then(\r\n                data =>{\r\n                    if( data.status === 'ok'){\r\n                        SweetAlert.fire({\r\n                            text: data.message,\r\n                            icon: \"success\"\r\n                        })\r\n                        cargarListadoFotos(); //llama a la funcion para que se recargue el listado  \r\n                    }else{\r\n                        SweetAlert.fire({\r\n                            text: data.message,\r\n                            icon: 'error'\r\n                        })\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    })\r\n       \r\n}\r\n\r\n\r\n//RETORNO DE LISTADOS FOTOS\r\n\r\n    return(\r\n        <>\r\n        {props.type === \"mispublicaciones\" &&\r\n        <NavBarMispublicaciones handleHideFotosEditorModal={onShowFotosEditorModals}/>\r\n        }\r\n\r\n   \r\n         <Row className=\"ml-2 mr-2\">\r\n\r\n             {\r\n                 //recorre todo el array de productos ejecutando la funcion\r\n                 // encada vuelta le paso una objeto a la funcion\r\n                 //retorna un componente tarjeta foto en cada vuelta. \r\n                 //devuelve un array que mapea los elementos de fotos\r\n                 fotos.map( foto=>{\r\n                        return(\r\n                            <TarjetaImagen  titulo={foto.titulo}\r\n                                            autor={foto.usuario}\r\n                                            foto={foto.foto}\r\n                                            id={foto.id}\r\n                                            type={props.type}\r\n                                            onEditClick={handleEditClick}//el llamado viene de tarjeta imagen \r\n                                            onDeleteClick={handleDeleteClick}\r\n                                            user={props.user}\r\n                                            isFav={true}     \r\n                                            onChangeFavStatus={handleCangeFavStatus}       \r\n                            />\r\n                        )\r\n                    }\r\n                 )\r\n             }\r\n\r\n\r\n         </Row>\r\n\r\n\r\n         <FotosEditorModals show={ShowFotosEditorModal} \r\n                            handleHide={handleHideFotosEditorModal}\r\n                            onFotoSaved={handleFotoSaved}// props. que se pasa a editorModal para que se cierre el modal cuando se carga \r\n                            idPhoto={selectedFoto}//tiene una variable de estado que viene de tarjetaImagen, que diferencia entre nuevo y editar \r\n                            />\r\n\r\n         </>\r\n    );\r\n}\r\n\r\nexport default ListadoFotos;"]},"metadata":{},"sourceType":"module"}